AWSTemplateFormatVersion: '2010-09-09'
Description: 'aws health > sns > slack notifications for customers who can not use the AWS Health API.'
Metadata:
  License: Apache-2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Lambda Package Configuration"
        Parameters:
          - S3CodeBucket
          - S3CodeZip
      -
        Label:
          default: "Slack Configuration"
        Parameters:
          - SlackURL
    ParameterLabels:
      S3CodeBucket:
        default: "Bucket"
      S3CodeZip:
        default: "Key"
      SlackURL:
        default: "SlackURL"
Parameters:
    SlackURL:
        Type: String
        Default: hooks.slack.com/services/xxx/xxxx/xxxxx
        Description: Enter your Slack webhook URL without https://
        AllowedPattern: ^((?!http).)*$
        ConstraintDescription: Please remove http(s):// from URL name
    S3CodeBucket:
        Type: String
        Default: just-bucket-name
        Description: The S3 bucket name that contains the sns-slack.zip package
    S3CodeZip:
        Description: The name of the .zip in the above bucket
        Type: String
        Default: sns-slack.zip
Resources:
    SlackKMSKey:
        Type: 'AWS::KMS::Key'
        Properties:
          Description: 'sns-to-slack key used to encrypt slack webhook'
          EnableKeyRotation: true
          KeyPolicy:
            Version: '2012-10-17'
            Statement:
              - Sid: Enable IAM User Permissions
                Effect: Allow
                Principal:
                  AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                Action: 'kms:*'
                Resource: '*'
    SlackKMSAlias:
        Type: 'AWS::KMS::Alias'
        Properties:
            AliasName: !Sub 'alias/${AWS::StackName}'
            TargetKeyId: !Ref SlackKMSKey
    LambdaKMSEncryptHook:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                ZipFile: |
                    import boto3
                    import cfnresponse
                    import json
                    from base64 import b64encode

                    kms = boto3.client('kms')

                    def lambda_handler(event, context):
                        print("Data in event: ", json.dumps(event))
                        response = {}
                        
                        if event['RequestType'] == "Delete":   
                            PhysicalResourceId = event['PhysicalResourceId']
                            response_data = { "PhysicalResourceId": PhysicalResourceId }
                        else:
                            response = kms.encrypt(
                            KeyId=event['ResourceProperties']['paramKMSKey'],
                            Plaintext=event['ResourceProperties']['paramSlackURL']
                            )
                            PhysicalResourceId = b64encode(response['CiphertextBlob']).decode()
                            response_data = { "EncryptedWebHook": PhysicalResourceId }
            
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, PhysicalResourceId)                
            Handler: index.lambda_handler
            Timeout: 30
            Role: !GetAtt 'EncryptLambdaExecutionRole.Arn'
            Runtime: python3.7
    LambdaSNStoSlack:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket: !Ref S3CodeBucket
                S3Key: !Ref S3CodeZip
            Environment:
                Variables:
                    encryptedWebHook: !Ref KMSCustomResource
            Handler: lambda_function.lambda_handler
            Timeout: 90
            Role: !GetAtt 'DecryptLambdaExecutionRole.Arn'
            Runtime: python3.7
    EncryptLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
                    Action:
                      - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: EncryptKMSLambdaPolicy
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - logs:CreateLogGroup
                          - logs:CreateLogStream
                          - logs:PutLogEvents
                        Resource: arn:aws:logs:*:*:*
                      - Effect: Allow
                        Action:
                          - kms:Encrypt
                        Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${SlackKMSKey}'
    DecryptLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
                    Action:
                      - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: DecryptKMSLambdaPolicy
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - logs:CreateLogGroup
                          - logs:CreateLogStream
                          - logs:PutLogEvents
                        Resource: arn:aws:logs:*:*:*
                      - Effect: Allow
                        Action:
                          - kms:Decrypt
                        Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${SlackKMSKey}'                    
    KMSCustomResource:
        Type: Custom::KMSEncrypt
        Properties:
            ServiceToken: !GetAtt LambdaKMSEncryptHook.Arn
            paramSlackURL: !Ref SlackURL
            paramKMSKey: !Ref SlackKMSKey        
    SNStoSlackTopic:
        Type: AWS::SNS::Topic
        Properties:
            Subscription:
              - Protocol: lambda
                Endpoint: !GetAtt LambdaSNStoSlack.Arn
        DependsOn: LambdaSNStoSlack
    CloudWatchHealthEventRule:
        Type: AWS::Events::Rule
        Properties:
            Description: 'Catch any aws.health events and send to sns topic' 
            EventPattern:
                source:
                  - 'aws.health'
            State: ENABLED
            Targets:
              -
                Arn:
                    Ref: 'SNStoSlackTopic'
                Id: 'HealthEventsToSNS'
    EventTopicPolicy:
        Type: 'AWS::SNS::TopicPolicy'
        Properties:
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Principal:
                    Service: events.amazonaws.com
                  Action: 'sns:Publish'
                  Resource: '*'
            Topics:
              - !Ref SNStoSlackTopic
    SNSInvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            Principal: sns.amazonaws.com
            SourceArn: !Ref SNStoSlackTopic 
            FunctionName: !GetAtt LambdaSNStoSlack.Arn
        DependsOn: SNStoSlackTopic