AWSTemplateFormatVersion: '2010-09-09'   
Description: 'AWS Health Organizational View Alerts - Slack notifications for customers who have Business or Enterprise Support'
Metadata:
    License: Apache-2.0
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label:
              default: 'Lambda Package Configuration'
            Parameters:
              - S3LambdaCodeBucket
              - S3LambdaCodeZip
              - S3BotoCodeBucket
              - S3BotoCodeZip
          - Label:
              default: 'Environment Variables'
            Parameters:
              - EnvTimeToSearch
              - EnvRegions
          - Label:
              default: 'Slack WebHook'
            Parameters:
              - SlackURL
        ParameterLabels:
          S3LambdaCodeBucket:
            default: 'Lambda Bucket'
          S3LambdaCodeZip:
            default: 'Lambda Key'
          S3BotoCodeBucket:
            default: 'Boto Bucket'
          S3BotoCodeZip:
            default: 'Boto Key'            
          EnvTimeToSearch:
            default: 'Search Back'
          EnvRegions:
            default: 'Regions'
          SlackURL:
            default: 'SlackURL'
Parameters:
    SlackURL:
        Type: String
        Default: hooks.slack.com/services/xxx/xxxx/xxxxx
        Description: Enter your Slack webhook URL without https://
        AllowedPattern: ^((?!http).)*$
        ConstraintDescription: Please remove http(s):// from URL name in Slack URL
    EnvTimeToSearch:
        Description: 'How many hours back to search for Health Events (default = 24 hours)'
        Default: '24'
        Type: Number
    EnvRegions:
        Description: List of specific regions you would like to be alerted on. (i.e. 'us-east-1','us-east-2'). If left blank it will alert on all regions
        Type: String
    S3LambdaCodeBucket:
        Description: The S3 bucket name that contains the healthapi-slack.zip lambda package (needs to be in same region you're launching this in)
        Type: String
        Default: just-bucket-name
        AllowedPattern: (?!^(\d{1,3}\.){3}\d{1,3}$)(^[a-z0-9]([a-z0-9-]*(\.[a-z0-9])?)*$(?<!\-))
        ConstraintDescription: Invalid S3 Bucket name, make sure you JUST put in the name of your bucket
    S3LambdaCodeZip:
        Description: The name of the .zip in the above bucket (if in a folder, be sure to include the path, i.e. packages/healthapi-slack-v0.0.0.zip)
        Type: String
        Default: healthapi-slack-v0.0.0.zip
        AllowedPattern: .*\.zip$
        ConstraintDescription: Lambda Key or Boto Key location does not end in .zip
    S3BotoCodeBucket:
        Description: The S3 bucket name that contains the boto3-v0.0.0.zip layer package (needs to be in same region you're launching this in)
        Type: String
        Default: just-bucket-name
        AllowedPattern: (?!^(\d{1,3}\.){3}\d{1,3}$)(^[a-z0-9]([a-z0-9-]*(\.[a-z0-9])?)*$(?<!\-))
        ConstraintDescription: Invalid S3 Bucket name, make sure you JUST put in the name of your bucket
    S3BotoCodeZip:
        Description: The name of the .zip in the above bucket (if in a folder, be sure to include the path, i.e. layers/boto3-v0.0.0.zip)
        Type: String
        Default: boto3-v0.0.0.zip 
        AllowedPattern: .*\.zip$
        ConstraintDescription: Lambda Key or Boto Key location does not end in .zip        
Resources:
    SlackKMSKey:
        Type: 'AWS::KMS::Key'
        Properties:
          Description: 'awshealth-to-slack key used to encrypt slack webhook'
          EnableKeyRotation: true
          KeyPolicy:
            Version: '2012-10-17'
            Statement:
              - Sid: Enable IAM User Permissions
                Effect: Allow
                Principal:
                  AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                Action: 'kms:*'
                Resource: '*'
    SlackKMSAlias:
        Type: 'AWS::KMS::Alias'
        Properties:
            AliasName: !Sub 'alias/${AWS::StackName}'
            TargetKeyId: !Ref SlackKMSKey
    HealthIssuesTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
          - AttributeName: 'arn'
            AttributeType: 'S'
          KeySchema:
          - AttributeName: 'arn'
            KeyType: 'HASH'
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
          TimeToLiveSpecification:
            AttributeName: ttl
            Enabled: TRUE
    EncryptLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
                    Action:
                      - sts:AssumeRole
            Path: /
            Policies:
            - PolicyName: EncryptKMSLambdaPolicy-HealthAPIToSlack
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource: arn:aws:logs:*:*:*
                  - Effect: Allow
                    Action:
                      - kms:Encrypt
                    Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${SlackKMSKey}'
    KMSCustomResource:
        Type: Custom::KMSEncrypt
        Properties:
            ServiceToken: !GetAtt LambdaKMSEncryptHook.Arn
            paramSlackURL: !Ref SlackURL
            paramKMSKey: !Ref SlackKMSKey                  
    DecryptLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
                    Action:
                      - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: DecryptKMSLambdaPolicy-HealthAPIToSlack
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - logs:CreateLogGroup
                          - logs:CreateLogStream
                          - logs:PutLogEvents
                        Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
                      - Effect: Allow
                        Action:
                          - kms:Decrypt
                        Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${SlackKMSKey}'
                      - Effect: Allow
                        Action:
                          - health:DescribeAffectedAccountsForOrganization
                          - health:DescribeAffectedEntitiesForOrganization
                          - health:DescribeEventDetailsForOrganization
                          - health:DescribeEventsForOrganization 
                          - health:DescribeEventDetails
                          - organizations:ListAccounts
                        Resource: "*"                          
                      - Effect: Allow
                        Action:
                          - dynamodb:ListTables
                        Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:*'
                      - Effect: Allow
                        Action:
                          - dynamodb:UpdateTimeToLive
                          - dynamodb:PutItem
                          - dynamodb:DeleteItem
                          - dynamodb:GetItem
                          - dynamodb:Scan
                          - dynamodb:Query
                          - dynamodb:UpdateItem
                          - dynamodb:UpdateTable
                          - dynamodb:GetRecords
                        Resource: !GetAtt HealthIssuesTable.Arn
        DependsOn: SlackKMSKey
    LambdaKMSEncryptHook:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                ZipFile: |
                    import boto3
                    import cfnresponse
                    import json
                    from base64 import b64encode

                    kms = boto3.client('kms')

                    def lambda_handler(event, context):
                        print("Data in event: ", json.dumps(event))
                        response = {}
                        
                        if event['RequestType'] == "Delete":   
                            PhysicalResourceId = event['PhysicalResourceId']
                            response_data = { "PhysicalResourceId": PhysicalResourceId }
                        else:
                            response = kms.encrypt(
                            KeyId=event['ResourceProperties']['paramKMSKey'],
                            Plaintext=event['ResourceProperties']['paramSlackURL']
                            )
                            PhysicalResourceId = b64encode(response['CiphertextBlob']).decode()
                            response_data = { "EncryptedWebHook": PhysicalResourceId }
            
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, PhysicalResourceId)                
            Handler: index.lambda_handler
            Timeout: 30
            Description: Lambda code to encrypt Slack Webhook
            Role: !GetAtt 'EncryptLambdaExecutionRole.Arn'
            Runtime: python3.7  
    UpdatedBoto3:
        Type: AWS::Lambda::LayerVersion
        Properties:
            CompatibleRuntimes:
              - python3.7
            Content:
                S3Bucket: !Ref S3BotoCodeBucket
                S3Key: !Ref S3BotoCodeZip
            Description: Updated version of boto3
    LambdaAwsHealthStatus:
        Type: 'AWS::Lambda::Function'
        Properties:
            Handler: lambda_function.lambda_handler
            Layers:
              - !Ref UpdatedBoto3
            Role: !GetAtt DecryptLambdaExecutionRole.Arn
            Runtime: python3.7
            Timeout: 90
            Description: Lambda code to determine if a Health Event update has posted
            Code:
                S3Bucket: !Ref S3LambdaCodeBucket
                S3Key: !Ref S3LambdaCodeZip
            Environment:
                Variables:
                    regions: !Ref EnvRegions
                    searchback: !Ref EnvTimeToSearch
                    ddbTable: !Ref HealthIssuesTable
                    encryptedWebHook: !Ref KMSCustomResource         
    HealthScheduledRule:
        Type: AWS::Events::Rule
        Properties:
            Description: 'HealthScheduledRule'
            ScheduleExpression: 'rate(1 minute)'
            State: 'ENABLED'
            Targets:
              - Arn: !GetAtt LambdaAwsHealthStatus.Arn
                Id: 'HealthEventsToSlack'
    PermissionForEventsToInvokeLambda:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !GetAtt LambdaAwsHealthStatus.Arn
            Action: lambda:InvokeFunction
            Principal: events.amazonaws.com
            SourceArn: !GetAtt HealthScheduledRule.Arn